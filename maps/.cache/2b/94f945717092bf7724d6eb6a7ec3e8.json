{"id":"node_modules/@google/maps/lib/apis/geocode.js","dependencies":[{"name":"/Users/sehermahmud/npm-global/udemy/e-Microservices/maps/package.json","includedInParent":true,"mtime":1600253454264},{"name":"/Users/sehermahmud/npm-global/udemy/e-Microservices/maps/node_modules/@google/maps/package.json","includedInParent":true,"mtime":1600253219062},{"name":"../internal/convert","loc":{"line":18,"column":20},"parent":"/Users/sehermahmud/npm-global/udemy/e-Microservices/maps/node_modules/@google/maps/lib/apis/geocode.js","resolved":"/Users/sehermahmud/npm-global/udemy/e-Microservices/maps/node_modules/@google/maps/lib/internal/convert.js"},{"name":"../internal/validate","loc":{"line":19,"column":16},"parent":"/Users/sehermahmud/npm-global/udemy/e-Microservices/maps/node_modules/@google/maps/lib/apis/geocode.js","resolved":"/Users/sehermahmud/npm-global/udemy/e-Microservices/maps/node_modules/@google/maps/lib/internal/validate.js"}],"generated":{"js":"/**\n * @license\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */;\n\nvar utils = require('../internal/convert');\nvar v = require('../internal/validate');\n\n/**\n * Makes a geocode request.\n *\n * @memberof! GoogleMapsClient\n * @name GoogleMapsClient.geocode\n * @function\n * @param {Object} query\n * @param {string} [query.address]\n * @param {Object} [query.components]\n * @param {Object} [query.bounds]\n * @param {number} query.bounds.south\n * @param {number} query.bounds.west\n * @param {number} query.bounds.north\n * @param {number} query.bounds.east\n * @param {string} [query.region]\n * @param {string} [query.language]\n * @param {ResponseCallback} callback Callback function for handling the result\n * @return {RequestHandle}\n */\nexports.geocode = {\n  url: 'https://maps.googleapis.com/maps/api/geocode/json',\n  validator: v.object({\n    address: v.optional(v.string),\n    components: v.optional(utils.pipedKeyValues),\n    bounds: v.optional(utils.bounds),\n    region: v.optional(v.string),\n    language: v.optional(v.string),\n    retryOptions: v.optional(utils.retryOptions),\n    timeout: v.optional(v.number)\n  })\n};\n\n/**\n * Makes a reverse geocode request.\n *\n * @memberof! GoogleMapsClient\n * @name GoogleMapsClient.reverseGeocode\n * @function\n * @param {Object} query\n * @param {LatLng} [query.latlng]\n * @param {string} [query.place_id]\n * @param {string} [query.result_type]\n * @param {string} [query.location_type]\n * @param {string} [query.language]\n * @param {ResponseCallback} callback Callback function for handling the result\n * @return {RequestHandle}\n */\nexports.reverseGeocode = {\n  url: 'https://maps.googleapis.com/maps/api/geocode/json',\n  validator: v.compose([\n    v.mutuallyExclusiveProperties(['place_id', 'latlng']),\n    v.mutuallyExclusiveProperties(['place_id', 'result_type']),\n    v.mutuallyExclusiveProperties(['place_id', 'location_type']),\n    v.object({\n      latlng: v.optional(utils.latLng),\n      place_id: v.optional(v.string),\n      result_type: v.optional(utils.arrayOf(v.string)),\n      location_type: v.optional(utils.arrayOf(v.oneOf([\n        'ROOFTOP', 'RANGE_INTERPOLATED', 'GEOMETRIC_CENTER', 'APPROXIMATE'\n      ]))),\n      language: v.optional(v.string),\n      retryOptions: v.optional(utils.retryOptions),\n      timeout: v.optional(v.number)\n    })\n  ])\n};\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/@google/maps/lib/apis/geocode.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/@google/maps/lib/apis/geocode.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@google/maps/lib/apis/geocode.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@google/maps/lib/apis/geocode.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@google/maps/lib/apis/geocode.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@google/maps/lib/apis/geocode.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@google/maps/lib/apis/geocode.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@google/maps/lib/apis/geocode.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@google/maps/lib/apis/geocode.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@google/maps/lib/apis/geocode.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@google/maps/lib/apis/geocode.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@google/maps/lib/apis/geocode.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@google/maps/lib/apis/geocode.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@google/maps/lib/apis/geocode.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@google/maps/lib/apis/geocode.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@google/maps/lib/apis/geocode.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@google/maps/lib/apis/geocode.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@google/maps/lib/apis/geocode.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@google/maps/lib/apis/geocode.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@google/maps/lib/apis/geocode.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@google/maps/lib/apis/geocode.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/@google/maps/lib/apis/geocode.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/@google/maps/lib/apis/geocode.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/@google/maps/lib/apis/geocode.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/@google/maps/lib/apis/geocode.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/@google/maps/lib/apis/geocode.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/@google/maps/lib/apis/geocode.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/@google/maps/lib/apis/geocode.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/@google/maps/lib/apis/geocode.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/@google/maps/lib/apis/geocode.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/@google/maps/lib/apis/geocode.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/@google/maps/lib/apis/geocode.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/@google/maps/lib/apis/geocode.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/@google/maps/lib/apis/geocode.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/@google/maps/lib/apis/geocode.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/@google/maps/lib/apis/geocode.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/@google/maps/lib/apis/geocode.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/@google/maps/lib/apis/geocode.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/@google/maps/lib/apis/geocode.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/@google/maps/lib/apis/geocode.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/@google/maps/lib/apis/geocode.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/@google/maps/lib/apis/geocode.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/@google/maps/lib/apis/geocode.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/@google/maps/lib/apis/geocode.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/@google/maps/lib/apis/geocode.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/@google/maps/lib/apis/geocode.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/@google/maps/lib/apis/geocode.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/@google/maps/lib/apis/geocode.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/@google/maps/lib/apis/geocode.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/@google/maps/lib/apis/geocode.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/@google/maps/lib/apis/geocode.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/@google/maps/lib/apis/geocode.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/@google/maps/lib/apis/geocode.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/@google/maps/lib/apis/geocode.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/@google/maps/lib/apis/geocode.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/@google/maps/lib/apis/geocode.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/@google/maps/lib/apis/geocode.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/@google/maps/lib/apis/geocode.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/@google/maps/lib/apis/geocode.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/@google/maps/lib/apis/geocode.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/@google/maps/lib/apis/geocode.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/@google/maps/lib/apis/geocode.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/@google/maps/lib/apis/geocode.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/@google/maps/lib/apis/geocode.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/@google/maps/lib/apis/geocode.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/@google/maps/lib/apis/geocode.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/@google/maps/lib/apis/geocode.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/@google/maps/lib/apis/geocode.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/@google/maps/lib/apis/geocode.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/@google/maps/lib/apis/geocode.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/@google/maps/lib/apis/geocode.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/@google/maps/lib/apis/geocode.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/@google/maps/lib/apis/geocode.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/@google/maps/lib/apis/geocode.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/@google/maps/lib/apis/geocode.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/@google/maps/lib/apis/geocode.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/@google/maps/lib/apis/geocode.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/@google/maps/lib/apis/geocode.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/@google/maps/lib/apis/geocode.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/@google/maps/lib/apis/geocode.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/@google/maps/lib/apis/geocode.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/@google/maps/lib/apis/geocode.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/@google/maps/lib/apis/geocode.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/@google/maps/lib/apis/geocode.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/@google/maps/lib/apis/geocode.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/@google/maps/lib/apis/geocode.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/@google/maps/lib/apis/geocode.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}}],"sources":{"node_modules/@google/maps/lib/apis/geocode.js":"/**\n * @license\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */;\n\nvar utils = require('../internal/convert');\nvar v = require('../internal/validate');\n\n/**\n * Makes a geocode request.\n *\n * @memberof! GoogleMapsClient\n * @name GoogleMapsClient.geocode\n * @function\n * @param {Object} query\n * @param {string} [query.address]\n * @param {Object} [query.components]\n * @param {Object} [query.bounds]\n * @param {number} query.bounds.south\n * @param {number} query.bounds.west\n * @param {number} query.bounds.north\n * @param {number} query.bounds.east\n * @param {string} [query.region]\n * @param {string} [query.language]\n * @param {ResponseCallback} callback Callback function for handling the result\n * @return {RequestHandle}\n */\nexports.geocode = {\n  url: 'https://maps.googleapis.com/maps/api/geocode/json',\n  validator: v.object({\n    address: v.optional(v.string),\n    components: v.optional(utils.pipedKeyValues),\n    bounds: v.optional(utils.bounds),\n    region: v.optional(v.string),\n    language: v.optional(v.string),\n    retryOptions: v.optional(utils.retryOptions),\n    timeout: v.optional(v.number)\n  })\n};\n\n/**\n * Makes a reverse geocode request.\n *\n * @memberof! GoogleMapsClient\n * @name GoogleMapsClient.reverseGeocode\n * @function\n * @param {Object} query\n * @param {LatLng} [query.latlng]\n * @param {string} [query.place_id]\n * @param {string} [query.result_type]\n * @param {string} [query.location_type]\n * @param {string} [query.language]\n * @param {ResponseCallback} callback Callback function for handling the result\n * @return {RequestHandle}\n */\nexports.reverseGeocode = {\n  url: 'https://maps.googleapis.com/maps/api/geocode/json',\n  validator: v.compose([\n    v.mutuallyExclusiveProperties(['place_id', 'latlng']),\n    v.mutuallyExclusiveProperties(['place_id', 'result_type']),\n    v.mutuallyExclusiveProperties(['place_id', 'location_type']),\n    v.object({\n      latlng: v.optional(utils.latLng),\n      place_id: v.optional(v.string),\n      result_type: v.optional(utils.arrayOf(v.string)),\n      location_type: v.optional(utils.arrayOf(v.oneOf([\n        'ROOFTOP', 'RANGE_INTERPOLATED', 'GEOMETRIC_CENTER', 'APPROXIMATE'\n      ]))),\n      language: v.optional(v.string),\n      retryOptions: v.optional(utils.retryOptions),\n      timeout: v.optional(v.number)\n    })\n  ])\n};\n"},"lineCount":87}},"error":null,"hash":"c40ce722375cba22d5a4ba4458802bd8","cacheData":{"env":{}}}